name: Build and Deploy

on:
  push:
    branches: [main]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: node:14.17.0-alpine
    steps:
      # клонирование репозитория
      - uses: actions/checkout@v2
      # Кеширование npm
      - name: Cache dependencies
        # включаем специальный action
        uses: actions/cache@v2
        # передаем параметры
        with:
          # что кешировать (путь)
          path: ~/.npm
          # ключ кеширования (хеш)
          key: npm-${{ hashFiles('package-lock.json') }}
          # ключ для восстановления кеша
          restore-keys: npm-
      - name: Install dependencies
        run: npm ci —ignore-scripts
      # Запуск сборки
      - name: Build
        run: npm run build
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.API_URL }}
      # Теперь загружаем артефакты
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
  deploy:
    # укажем, что для деплоя нам нужно сначала собрать приложение
    needs: build
    runs-on: ubuntu-latest
    steps:
      # загружаем ранее сохраненные артефакты
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:


      # Запуск сборки
      - name: Build
        run: npm run build
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.API_URL }}
      # Теперь загружаем артефакты
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
  deploy:
    # укажем, что для деплоя нам нужно сначала собрать приложение
    needs: build
    runs-on: ubuntu-latest
    steps:
      # загружаем ранее сохраненные артефакты
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: build
      # Дальше по аналогии с backend, просто загружаем на сервер
      - name: Setup SSH
        run: |
          # создаем директорию для ключа
          mkdir -p ~/.ssh
          # выводим содержимое нашей переменной окружения в файл
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          # ставим нужные безопасные права
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          # Добавляем отпечаток сервера
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Copy files to the server
        run: |
          scp -r build/* $SSH_USER@$SSH_HOST:~/realworld/public
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
